kill(1) -- 向进程发送信号，或列出信号列表
==========================================

##描述

向进程发送信号，或列出信号列表,kill给指定进程发送指定信号.如果没有指定信
号,则发送TERM信号.TERM信号会杀死不能俘获该信号的进程.对于其他进程,可能需
要使用KILL(9)信号,因为该信号不能够被俘获.

你的shell也许有自己版本的kill命令，他们通常会取代这里描述的版本。请参考
你的shell提供的文档来了解它所支持的选项的细节。

##选项

	kill [-s 信号声明|-n 信号编号|-信号声明] 进程号|任务声明...
	kill -l [信号声明]

* `pid...`:
给kill指定一个该发信号的进程列表.每个pid可为下面四种之一.进程名
在这种情况下,发信号给所命名的进程.n这里的n大于0.将发信号给pid为n
的进程.-1在这种情况下,只要发信号的用户能够控制那些进行,将发信号
给所有从MAX_INT到2的进程.-n这里的n大于1,在这种情况下,发信号给属
于进程组n的进程.如果给定一个负的参数,那么信号必须首先声明,否则它
会被当作信号发送出去.
	
* `-s`:
指定发送的信号.信号可以以信号名或数字的方式给定.
	
* `-p`:
指定kill只打印命名进程的进程标识(pid),而不应发送给它信号.

* `-l`:
打印信号名的列表.这可以在`/usr/include/linux/signal.h`中找到.

* `-s,--signal=SIGNAL,-SIGNAL`:
指定要发送的信号名称或数字

* `-l,--list`:
列出信号名称，或者将信号名称“从/向”信号数字转换

* `-t,--table`:
打印出信号信息表格
	
参数 `SIGNAL` 可能是一个像 'HUP' 一样的名字, 或者是一个单独的数字 ‘1’， 或者是
进程收到信号后的退出状态。 参数 PID 是一个整数; 如果为负, 则代表一个进程组。

##注意

使用 `kill`(2) 系统调用向一个多线程的进程的指定线程发送信号是不可能的。
如果 `kill`(2) 被用来向一个线程组发送信号, 那么内核将选择任意一个
未阻挡该信号的线程。 请参见 `clone`(2) 中的 CLONE_THREAD 部分了解细节。

`kill`(1) 命令与 `kill`(2) 系统调用都接受一个 TID (线程 ID, 参见 `gettid`(2))
作为一个参数。 此时, 它们的行为不会被改变, 信号仍然会被送到线程组, 而非指定的线程。

##返回值

kill 有以下返回值：

* `0`:
成功

* `1`:
失败

* `64`:
部分成功 (当多于一个进程被指定时)

##参考

bash(1), tcsh(1), kill(2), sigvec(2)
